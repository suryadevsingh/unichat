{"ast":null,"code":"var _createForOfIteratorHelper = require(\"D:\\\\Web\\\\unichat\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar merge = require('deepmerge');\n\nvar he = require('he');\n\nvar htmlparser = require('htmlparser2');\n\nvar _require = require('./block-text-builder'),\n    BlockTextBuilder = _require.BlockTextBuilder;\n\nvar defaultFormatters = require('./formatter');\n\nvar _require2 = require('./helper'),\n    limitedDepthRecursive = _require2.limitedDepthRecursive,\n    set = _require2.set,\n    splitSelector = _require2.splitSelector; // eslint-disable-next-line import/no-unassigned-import\n\n\nrequire('./typedefs');\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\n\n\nvar DEFAULT_OPTIONS = {\n  baseElement: 'body',\n  decodeOptions: {\n    isAttributeValue: false,\n    strict: false\n  },\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: 1 << 24 // 16_777_216\n\n  },\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  returnDomByDefault: true,\n  tables: [],\n  tags: {\n    '': {\n      format: 'inline'\n    },\n    // defaults for any other tag name\n    'a': {\n      format: 'anchor',\n      options: {\n        baseUrl: null,\n        hideLinkHrefIfSameAsText: false,\n        ignoreHref: false,\n        noAnchorUrl: true,\n        noLinkBrackets: false\n      }\n    },\n    'article': {\n      format: 'block'\n    },\n    'aside': {\n      format: 'block'\n    },\n    'blockquote': {\n      format: 'blockquote',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        trimEmptyLines: true\n      }\n    },\n    'br': {\n      format: 'lineBreak'\n    },\n    'div': {\n      format: 'block'\n    },\n    'footer': {\n      format: 'block'\n    },\n    'form': {\n      format: 'block'\n    },\n    'h1': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h2': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h3': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h4': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h5': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h6': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'header': {\n      format: 'block'\n    },\n    'hr': {\n      format: 'horizontalLine',\n      options: {\n        leadingLineBreaks: 2,\n        length: undefined,\n        trailingLineBreaks: 2\n      }\n    },\n    'img': {\n      format: 'image',\n      options: {\n        baseUrl: null\n      }\n    },\n    'main': {\n      format: 'block'\n    },\n    'nav': {\n      format: 'block'\n    },\n    'ol': {\n      format: 'orderedList',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'p': {\n      format: 'paragraph',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'pre': {\n      format: 'pre',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'section': {\n      format: 'block'\n    },\n    'table': {\n      format: 'table',\n      options: {\n        colSpacing: 3,\n        leadingLineBreaks: 2,\n        maxColumnWidth: 60,\n        rowSpacing: 0,\n        trailingLineBreaks: 2,\n        uppercaseHeaderCells: true\n      }\n    },\n    'ul': {\n      format: 'unorderedList',\n      options: {\n        itemPrefix: ' * ',\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'wbr': {\n      format: 'wbr'\n    }\n  },\n  whitespaceCharacters: \" \\t\\r\\n\\f\\u200B\",\n  wordwrap: 80\n};\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { htmlToText } = require('html-to-text');\n * const text = htmlToText('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\n\nfunction htmlToText(html) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = merge(DEFAULT_OPTIONS, options, {\n    arrayMerge: function arrayMerge(destinationArray, sourceArray, mergeOptions) {\n      return sourceArray;\n    }\n  });\n  options.formatters = Object.assign({}, defaultFormatters, options.formatters);\n  handleDeprecatedOptions(options);\n  var maxInputLength = options.limits.maxInputLength;\n\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(\"Input length \".concat(html.length, \" is above allowed limit of \").concat(maxInputLength, \". Truncating without ellipsis.\"));\n    html = html.substring(0, maxInputLength);\n  }\n\n  var handler = new htmlparser.DefaultHandler();\n  new htmlparser.Parser(handler, {\n    decodeEntities: false\n  }).parseComplete(html);\n  var limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk, function (dom, builder) {\n    builder.addInline(options.limits.ellipsis || '');\n  });\n  var baseElements = Array.isArray(options.baseElement) ? options.baseElement : [options.baseElement];\n  var bases = baseElements.map(function (be) {\n    return findBase(handler.dom, options, be);\n  }).filter(function (b) {\n    return b;\n  }).reduce(function (acc, b) {\n    return acc.concat(b);\n  }, []);\n  var builder = new BlockTextBuilder(options);\n  limitedWalk(bases, builder);\n  return builder.toString();\n}\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\n\n\nfunction handleDeprecatedOptions(options) {\n  var tagDefinitions = Object.values(options.tags);\n\n  function copyFormatterOption(source, format, target) {\n    if (options[source] === undefined) {\n      return;\n    }\n\n    for (var _i = 0, _tagDefinitions = tagDefinitions; _i < _tagDefinitions.length; _i++) {\n      var tagDefinition = _tagDefinitions[_i];\n\n      if (tagDefinition.format === format) {\n        set(tagDefinition, ['options', target], options[source]);\n      }\n    }\n  }\n\n  copyFormatterOption('hideLinkHrefIfSameAsText', 'anchor', 'hideLinkHrefIfSameAsText');\n  copyFormatterOption('ignoreHref', 'anchor', 'ignoreHref');\n  copyFormatterOption('linkHrefBaseUrl', 'anchor', 'baseUrl');\n  copyFormatterOption('noAnchorUrl', 'anchor', 'noAnchorUrl');\n  copyFormatterOption('noLinkBrackets', 'anchor', 'noLinkBrackets');\n  copyFormatterOption('linkHrefBaseUrl', 'image', 'baseUrl');\n  copyFormatterOption('unorderedListItemPrefix', 'unorderedList', 'itemPrefix');\n  copyFormatterOption('uppercaseHeadings', 'heading', 'uppercase');\n  copyFormatterOption('uppercaseHeadings', 'table', 'uppercaseHeadings');\n  copyFormatterOption('uppercaseHeadings', 'dataTable', 'uppercaseHeadings');\n\n  if (options['ignoreImage']) {\n    var _iterator = _createForOfIteratorHelper(tagDefinitions),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var tagDefinition = _step.value;\n\n        if (tagDefinition.format === 'image') {\n          tagDefinition.format = 'skip';\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (options['singleNewLineParagraphs']) {\n    var _iterator2 = _createForOfIteratorHelper(tagDefinitions),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _tagDefinition = _step2.value;\n\n        if (_tagDefinition.format === 'paragraph' || _tagDefinition.format === 'pre') {\n          set(_tagDefinition, ['options', 'leadingLineBreaks'], 1);\n          set(_tagDefinition, ['options', 'trailingLineBreaks'], 1);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n}\n\nfunction findBase(dom, options, baseElement) {\n  var result = null;\n  var splitTag = splitSelector(baseElement);\n\n  function recursiveWalk(walk,\n  /** @type { DomNode[] } */\n  dom) {\n    if (result) {\n      return;\n    }\n\n    dom = dom.slice(0, options.limits.maxChildNodes);\n\n    var _iterator3 = _createForOfIteratorHelper(dom),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var elem = _step3.value;\n\n        if (result) {\n          return;\n        }\n\n        if (elem.name === splitTag.element) {\n          var _ret = function () {\n            var documentClasses = elem.attribs && elem.attribs.class ? elem.attribs.class.split(' ') : [];\n            var documentIds = elem.attribs && elem.attribs.id ? elem.attribs.id.split(' ') : [];\n\n            if (splitTag.classes.every(function (val) {\n              return documentClasses.indexOf(val) >= 0;\n            }) && splitTag.ids.every(function (val) {\n              return documentIds.indexOf(val) >= 0;\n            })) {\n              result = [elem];\n              return {\n                v: void 0\n              };\n            }\n          }();\n\n          if (typeof _ret === \"object\") return _ret.v;\n        }\n\n        if (elem.children) {\n          walk(elem.children);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  var limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk);\n  limitedWalk(dom);\n  return options.returnDomByDefault ? result || dom : result;\n}\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\n\n\nfunction recursiveWalk(walk, dom, builder) {\n  if (!dom) {\n    return;\n  }\n\n  var options = builder.options;\n  var tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n\n  var _iterator4 = _createForOfIteratorHelper(dom),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var elem = _step4.value;\n\n      switch (elem.type) {\n        case 'text':\n          {\n            builder.addInline(he.decode(elem.data, options.decodeOptions));\n            break;\n          }\n\n        case 'tag':\n          {\n            var tags = options.tags;\n            var tagDefinition = tags[elem.name] || tags[''];\n            var format = options.formatters[tagDefinition.format];\n            format(elem, walk, builder, tagDefinition.options || {});\n            break;\n          }\n\n        default:\n          /* do nothing */\n          break;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return;\n}\n/**\n * @deprecated Import/require `{ htmlToText }` function instead!\n * @see htmlToText\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n */\n\n\nvar fromString = function fromString(html) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return htmlToText(html, options);\n};\n\nmodule.exports = {\n  htmlToText: htmlToText,\n  fromString: fromString\n};","map":{"version":3,"sources":["D:/Web/unichat/node_modules/html-to-text/lib/html-to-text.js"],"names":["merge","require","he","htmlparser","BlockTextBuilder","defaultFormatters","limitedDepthRecursive","set","splitSelector","DEFAULT_OPTIONS","baseElement","decodeOptions","isAttributeValue","strict","formatters","limits","ellipsis","maxChildNodes","undefined","maxDepth","maxInputLength","longWordSplit","forceWrapOnLimit","wrapCharacters","preserveNewlines","returnDomByDefault","tables","tags","format","options","baseUrl","hideLinkHrefIfSameAsText","ignoreHref","noAnchorUrl","noLinkBrackets","leadingLineBreaks","trailingLineBreaks","trimEmptyLines","uppercase","length","colSpacing","maxColumnWidth","rowSpacing","uppercaseHeaderCells","itemPrefix","whitespaceCharacters","wordwrap","htmlToText","html","arrayMerge","destinationArray","sourceArray","mergeOptions","Object","assign","handleDeprecatedOptions","console","warn","substring","handler","DefaultHandler","Parser","decodeEntities","parseComplete","limitedWalk","recursiveWalk","dom","builder","addInline","baseElements","Array","isArray","bases","map","be","findBase","filter","b","reduce","acc","concat","toString","tagDefinitions","values","copyFormatterOption","source","target","tagDefinition","result","splitTag","walk","slice","elem","name","element","documentClasses","attribs","class","split","documentIds","id","classes","every","val","indexOf","ids","children","tooManyChildNodes","push","data","type","decode","fromString","module","exports"],"mappings":"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","sourcesContent":["const merge = require('deepmerge');\nconst he = require('he');\nconst htmlparser = require('htmlparser2');\n\nconst { BlockTextBuilder } = require('./block-text-builder');\nconst defaultFormatters = require('./formatter');\nconst { limitedDepthRecursive, set, splitSelector } = require('./helper');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\nconst DEFAULT_OPTIONS = {\n  baseElement: 'body',\n  decodeOptions: {\n    isAttributeValue: false,\n    strict: false\n  },\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: (1 << 24) // 16_777_216\n  },\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  returnDomByDefault: true,\n  tables: [],\n  tags: {\n    '': { format: 'inline' }, // defaults for any other tag name\n    'a': {\n      format: 'anchor',\n      options: { baseUrl: null, hideLinkHrefIfSameAsText: false, ignoreHref: false, noAnchorUrl: true, noLinkBrackets: false }\n    },\n    'article': { format: 'block' },\n    'aside': { format: 'block' },\n    'blockquote': {\n      format: 'blockquote',\n      options: { leadingLineBreaks: 2, trailingLineBreaks: 2, trimEmptyLines: true }\n    },\n    'br': { format: 'lineBreak' },\n    'div': { format: 'block' },\n    'footer': { format: 'block' },\n    'form': { format: 'block' },\n    'h1': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h2': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h3': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h4': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'h5': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'h6': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'header': { format: 'block' },\n    'hr': { format: 'horizontalLine', options: { leadingLineBreaks: 2, length: undefined, trailingLineBreaks: 2 } },\n    'img': { format: 'image', options: { baseUrl: null } },\n    'main': { format: 'block' },\n    'nav': { format: 'block' },\n    'ol': { format: 'orderedList', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'p': { format: 'paragraph', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'pre': { format: 'pre', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'section': { format: 'block' },\n    'table': {\n      format: 'table',\n      options: {\n        colSpacing: 3,\n        leadingLineBreaks: 2,\n        maxColumnWidth: 60,\n        rowSpacing: 0,\n        trailingLineBreaks: 2,\n        uppercaseHeaderCells: true\n      }\n    },\n    'ul': {\n      format: 'unorderedList',\n      options: { itemPrefix: ' * ', leadingLineBreaks: 2, trailingLineBreaks: 2 }\n    },\n    'wbr': { format: 'wbr' }\n  },\n  whitespaceCharacters: ' \\t\\r\\n\\f\\u200b',\n  wordwrap: 80\n};\n\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { htmlToText } = require('html-to-text');\n * const text = htmlToText('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\nfunction htmlToText (html, options = {}) {\n  options = merge(\n    DEFAULT_OPTIONS,\n    options,\n    { arrayMerge: (destinationArray, sourceArray, mergeOptions) => sourceArray }\n  );\n  options.formatters = Object.assign({}, defaultFormatters, options.formatters);\n\n  handleDeprecatedOptions(options);\n\n  const maxInputLength = options.limits.maxInputLength;\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(\n      `Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`\n    );\n    html = html.substring(0, maxInputLength);\n  }\n\n  const handler = new htmlparser.DefaultHandler();\n  new htmlparser.Parser(handler, { decodeEntities: false }).parseComplete(html);\n\n  const limitedWalk = limitedDepthRecursive(\n    options.limits.maxDepth,\n    recursiveWalk,\n    function (dom, builder) {\n      builder.addInline(options.limits.ellipsis || '');\n    }\n  );\n\n  const baseElements = Array.isArray(options.baseElement)\n    ? options.baseElement\n    : [options.baseElement];\n  const bases = baseElements\n    .map(be => findBase(handler.dom, options, be))\n    .filter(b => b)\n    .reduce((acc, b) => acc.concat(b), []);\n\n  const builder = new BlockTextBuilder(options);\n  limitedWalk(bases, builder);\n  return builder.toString();\n}\n\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\nfunction handleDeprecatedOptions (options) {\n  const tagDefinitions = Object.values(options.tags);\n\n  function copyFormatterOption (source, format, target) {\n    if (options[source] === undefined) { return; }\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === format) {\n        set(tagDefinition, ['options', target], options[source]);\n      }\n    }\n  }\n\n  copyFormatterOption('hideLinkHrefIfSameAsText', 'anchor', 'hideLinkHrefIfSameAsText');\n  copyFormatterOption('ignoreHref', 'anchor', 'ignoreHref');\n  copyFormatterOption('linkHrefBaseUrl', 'anchor', 'baseUrl');\n  copyFormatterOption('noAnchorUrl', 'anchor', 'noAnchorUrl');\n  copyFormatterOption('noLinkBrackets', 'anchor', 'noLinkBrackets');\n\n  copyFormatterOption('linkHrefBaseUrl', 'image', 'baseUrl');\n\n  copyFormatterOption('unorderedListItemPrefix', 'unorderedList', 'itemPrefix');\n\n  copyFormatterOption('uppercaseHeadings', 'heading', 'uppercase');\n  copyFormatterOption('uppercaseHeadings', 'table', 'uppercaseHeadings');\n  copyFormatterOption('uppercaseHeadings', 'dataTable', 'uppercaseHeadings');\n\n  if (options['ignoreImage']) {\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === 'image') {\n        tagDefinition.format = 'skip';\n      }\n    }\n  }\n\n  if (options['singleNewLineParagraphs']) {\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === 'paragraph' || tagDefinition.format === 'pre') {\n        set(tagDefinition, ['options', 'leadingLineBreaks'], 1);\n        set(tagDefinition, ['options', 'trailingLineBreaks'], 1);\n      }\n    }\n  }\n}\n\nfunction findBase (dom, options, baseElement) {\n  let result = null;\n\n  const splitTag = splitSelector(baseElement);\n\n  function recursiveWalk (walk, /** @type { DomNode[] } */ dom) {\n    if (result) { return; }\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    for (const elem of dom) {\n      if (result) { return; }\n      if (elem.name === splitTag.element) {\n        const documentClasses = elem.attribs && elem.attribs.class ? elem.attribs.class.split(' ') : [];\n        const documentIds = elem.attribs && elem.attribs.id ? elem.attribs.id.split(' ') : [];\n\n        if (\n          splitTag.classes.every(function (val) { return documentClasses.indexOf(val) >= 0; }) &&\n          splitTag.ids.every(function (val) { return documentIds.indexOf(val) >= 0; })\n        ) {\n          result = [elem];\n          return;\n        }\n      }\n      if (elem.children) { walk(elem.children); }\n    }\n  }\n\n  const limitedWalk = limitedDepthRecursive(\n    options.limits.maxDepth,\n    recursiveWalk\n  );\n\n  limitedWalk(dom);\n  return options.returnDomByDefault ? result || dom : result;\n}\n\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\nfunction recursiveWalk (walk, dom, builder) {\n  if (!dom) { return; }\n\n  const options = builder.options;\n\n  const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n\n  for (const elem of dom) {\n    switch (elem.type) {\n      case 'text': {\n        builder.addInline(he.decode(elem.data, options.decodeOptions));\n        break;\n      }\n      case 'tag': {\n        const tags = options.tags;\n        const tagDefinition = tags[elem.name] || tags[''];\n        const format = options.formatters[tagDefinition.format];\n        format(elem, walk, builder, tagDefinition.options || {});\n        break;\n      }\n      default:\n        /* do nothing */\n        break;\n    }\n  }\n\n  return;\n}\n\n/**\n * @deprecated Import/require `{ htmlToText }` function instead!\n * @see htmlToText\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n */\nconst fromString = (html, options = {}) => htmlToText(html, options);\n\nmodule.exports = {\n  htmlToText: htmlToText,\n  fromString: fromString\n};\n"]},"metadata":{},"sourceType":"script"}